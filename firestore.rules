rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAdminOrArtist() {
      return isAuthenticated() &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artist');
    }

    function isAuthenticatedUser() {
      return isAuthenticated() && request.auth.uid == resource.data.uid;
    }

    function isOwnerOrAdmin() {
      return isAuthenticated() &&
        (request.auth.uid == resource.data.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Users collection - CRITICAL: Admin can manage all users, users can read/update their own
    match /users/{userId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == userId ||
         isAdminOrArtist());
      allow create: if isAuthenticated() && isAdmin(); // Only admins can create new users
      allow update: if isAuthenticated() &&
        (request.auth.uid == userId ||
         isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection - Users can manage their own, artists/admins can manage all
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid ||
         resource.data.artistId == request.auth.uid ||
         isAdminOrArtist());
      allow write: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid ||
         resource.data.artistId == request.auth.uid ||
         isAdminOrArtist());
      allow create: if isAuthenticated();
      allow delete: if isAdminOrArtist();
    }

    // Bookings collection - Track booked time slots
    match /bookings/{bookingId} {
      allow read: if true; // Public read for availability checking
      allow write: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAdminOrArtist();
    }

    // Artist availability collection
    match /artistAvailability/{docId} {
      allow read: if true; // Public read access for booking calendar
      allow write: if isAdminOrArtist() &&
        (resource == null || resource.data.artistId == request.auth.uid);
      allow create: if isAdminOrArtist() &&
        request.resource.data.artistId is string;
      allow update: if isAdminOrArtist() &&
        resource.data.artistId == request.resource.data.artistId;
      allow delete: if isAdminOrArtist();
    }

    // Reviews collection - Public read, authenticated create, admin manage
    match /reviews/{reviewId} {
      allow read: if true; // Public read for homepage
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Health forms collection - Users can manage their own, admins can read all
    match /healthForms/{formId} {
      allow read: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow write: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // Payments collection - Users can read their own, admins can manage all
    match /payments/{paymentId} {
      allow read: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow write: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // Coupons collection - Admin only management
    match /coupons/{couponId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Gift cards collection - Admin only management
    match /giftCards/{giftCardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // PDF documents collection - Users can access their own, admins can manage all
    match /pdfDocuments/{docId} {
      allow read: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow write: if isAuthenticated() &&
        (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // User activities collection - Users can manage their own, admins can read all
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdminOrArtist());
      allow write: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // Business settings collection - Admin only
    match /businessSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // System config collection - Admin only
    match /systemConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Contact forms collection - Anonymous create, admin read
    match /contactForms/{formId} {
      allow read: if isAdmin();
      allow create: if true; // Allow anonymous contact form submissions
      allow delete: if isAdmin();
    }

    // Services collection - Public read, admin manage
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Analytics collection - Admin only
    match /analytics/{analyticId} {
      allow read, write: if isAdmin();
    }

    // Features collection - Admin only for project management
    match /features/{featureId} {
      allow read, write: if isAdmin();
    }

    // Documents collection - Admin only for PRP/project management
    match /docs/{docId} {
      allow read, write: if isAdmin();
    }

    // Versions collection - Admin only for version management
    match /versions/{versionId} {
      allow read, write: if isAdmin();
    }

    // CRM collections
    match /crm/{document=**} {
      allow read, write: if isAdmin();
    }

    // CRM Settings collection - Admin only
    match /crmSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Chatbot collections
    match /chatbot/{document=**} {
      allow read, write: if isAuthenticated();
    }

    // Inventory collection - Artist/Admin management
    match /inventory/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAdminOrArtist();
    }

    // Artists collection - for backward compatibility
    match /artists/{artistId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Availability collection - for backward compatibility
    match /availability/{availabilityId} {
      allow read: if isAuthenticated();
      allow write: if isAdminOrArtist();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAdminOrArtist();
      allow update: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // Coupon codes collection - for backward compatibility
    match /couponCodes/{couponId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
