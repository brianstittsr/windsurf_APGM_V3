rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isAdminOrArtist() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'artist'];
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['profile', 'role', 'isActive']) &&
             data.profile.keys().hasAll(['firstName', 'lastName', 'email', 'phone']) &&
             data.role in ['client', 'admin', 'artist'] &&
             data.isActive is bool;
    }

    // Users collection - users can read/write their own data, admins can manage all users
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdminOrArtist();
      allow create: if isAuthenticated() && isOwner(userId) && isValidUserData(request.resource.data);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Appointments collection - users can see their own appointments, admins/artists can see all
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated() && 
                       (request.resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow update: if isAuthenticated() && 
                       (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow delete: if isAdmin();
    }

    // Health forms - only accessible by the client who submitted it and admins/artists
    match /healthForms/{formId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated() && 
                       request.resource.data.clientId == request.auth.uid;
      allow update: if isAdminOrArtist();
      allow delete: if isAdmin();
    }

    // Candidate assessments - accessible by the person who submitted it and admins
    match /candidateAssessments/{assessmentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if true; // Allow anonymous submissions
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Payments - only accessible by the client and admins/artists
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAdminOrArtist();
      allow update: if isAdminOrArtist();
      allow delete: if isAdmin();
    }

    // Services - readable by all authenticated users, manageable by admins
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Gift cards - readable by purchaser/recipient, manageable by admins
    match /giftCards/{giftCardId} {
      allow read: if isAuthenticated() && 
                     (resource.data.purchaserEmail == request.auth.token.email ||
                      resource.data.recipientEmail == request.auth.token.email ||
                      isAdminOrArtist());
      allow write: if isAdminOrArtist();
    }

    // Coupon codes - readable by authenticated users, manageable by admins
    match /couponCodes/{couponId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Contact forms - readable by admins, creatable by anyone
    match /contactForms/{formId} {
      allow read: if isAdminOrArtist();
      allow create: if true; // Allow anonymous contact form submissions
      allow update: if isAdminOrArtist();
      allow delete: if isAdmin();
    }

    // Artists - readable by authenticated users, manageable by admins
    match /artists/{artistId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Reviews - readable by all, writable by clients for their own appointments
    match /reviews/{reviewId} {
      allow read: if true; // Public reviews
      allow create: if isAuthenticated() && 
                       request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow delete: if isAdmin();
    }

    // Notifications - only accessible by the user they belong to and admins
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAdminOrArtist();
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // Business settings - only accessible by admins
    match /businessSettings/{settingId} {
      allow read: if isAdminOrArtist();
      allow write: if isAdmin();
    }

    // Analytics - only accessible by admins and artists
    match /analytics/{analyticsId} {
      allow read: if isAdminOrArtist();
      allow write: if isAdmin();
    }

    // Availability - readable by authenticated users, writable by admins/artists
    match /availability/{availabilityId} {
      allow read: if isAuthenticated();
      allow write: if isAdminOrArtist();
    }

    // User Activities - users can read/write their own activities, admins can read all
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdminOrArtist());
      allow delete: if isAdmin();
    }

    // PDF Documents - users can read their own documents, admins can manage all
    match /pdfDocuments/{documentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAdminOrArtist();
      allow update: if isAdminOrArtist();
      allow delete: if isAdmin();
    }

    // Artist Availability Collection - Public read access for booking calendar
    match /artistAvailability/{docId} {
      allow read: if true; // Public read access for booking calendar
      allow write: if request.auth != null && 
        (resource == null || resource.data.artistId == request.auth.uid) &&
        request.auth.token.role in ['admin', 'artist'];
      allow create: if request.auth != null && 
        request.auth.token.role in ['admin', 'artist'] &&
        request.resource.data.artistId is string;
      allow update: if request.auth != null && 
        request.auth.token.role in ['admin', 'artist'] &&
        resource.data.artistId == request.resource.data.artistId;
      allow delete: if request.auth != null && 
        request.auth.token.role in ['admin', 'artist'];
    }

    // Gift Cards Collection - Authenticated read for validation, admin/artist management
    match /giftCards/{giftCardId} {
      allow read: if isAuthenticated(); // Authenticated users can read for validation
      allow create: if isAdminOrArtist(); // Only admin/artist can create gift cards
      allow update: if isAdminOrArtist() || 
                       (isAuthenticated() && 
                        // Allow clients to update gift cards during checkout (usage tracking)
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['remainingAmount', 'isRedeemed', 'updatedAt']) &&
                        request.resource.data.remainingAmount <= resource.data.remainingAmount); // Can only decrease balance
      allow delete: if isAdmin(); // Only admin can delete
    }

    // Coupons Collection - Authenticated read for validation, admin management
    match /coupons/{couponId} {
      allow read: if isAuthenticated(); // Authenticated users can read for validation
      allow create: if isAdmin(); // Only admin can create coupons
      allow update: if isAdmin() || 
                       (isAuthenticated() && 
                        // Allow clients to update coupon usage during checkout
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentUses', 'updatedAt']) &&
                        request.resource.data.currentUses > resource.data.currentUses); // Can only increment usage
      allow delete: if isAdmin(); // Only admin can delete
    }

    // Reviews Collection - Public read for approved/visible reviews, admin management
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for displaying reviews on website
      allow create: if isAdmin(); // Only admin can create reviews
      allow update: if isAdmin(); // Only admin can update reviews
      allow delete: if isAdmin(); // Only admin can delete reviews
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
