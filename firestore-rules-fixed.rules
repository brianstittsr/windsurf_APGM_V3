rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isAdminOrArtist() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'artist'];
    }

    // Users collection - users can read/write their own data, admins can manage all users
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdminOrArtist();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Services collection - public read, admin write
    match /services/{serviceId} {
      allow read: if true; // Public read access
      allow create, update, delete: if isAdmin();
    }

    // Reviews collection - public read, admin write
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for displaying reviews
      allow create, update, delete: if isAdmin();
    }

    // Coupons collection - authenticated read, admin write
    match /coupons/{couponId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Gift cards collection - owner read, admin write
    match /giftCards/{giftCardId} {
      allow read: if isAuthenticated() && 
                     (resource.data.recipientEmail == request.auth.token.email || 
                      resource.data.purchaserEmail == request.auth.token.email ||
                      isAdmin());
      allow create, update, delete: if isAdmin();
    }

    // Appointments collection - user ownership + admin access
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated() && 
                       (request.resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow update: if isAuthenticated() && 
                       (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow delete: if isAdmin();
    }

    // Health forms collection - user ownership + admin access
    match /healthForms/{formId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow create: if isAuthenticated() && 
                       request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.clientId == request.auth.uid || isAdminOrArtist());
      allow delete: if isAdmin();
    }

    // Payments collection - user ownership + admin access
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.clientId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.clientId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // User activities collection - user ownership + admin read
    match /userActivities/{activityId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // PDF documents collection - user ownership + admin access
    match /pdfDocuments/{docId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // Business settings collection - admin only
    match /businessSettings/{settingId} {
      allow read, write: if isAdmin();
    }

    // System config collection - admin only
    match /systemConfig/{configId} {
      allow read, write: if isAdmin();
    }

    // Contact submissions - public write, admin read
    match /contactSubmissions/{submissionId} {
      allow read: if isAdmin();
      allow create: if true; // Allow anonymous contact form submissions
      allow update, delete: if isAdmin();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
